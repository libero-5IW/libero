// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  firstName         String
  lastName          String
  email             String   @unique
  password          String
  companyName       String?
  addressLine       String
  postalCode        String
  city              String
  country           String   @default("France")
  legalStatus       String
  siret             String
  tvaNumber         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  quoteTemplates    QuoteTemplate[]
  quotes            Quote[]
  invoiceTemplates  InvoiceTemplate[]
  invoices          Invoice[]
  clients           Client[] 
  contractTemplates ContractTemplate[]
  contracts         Contract[]
}

model Client {
  id          String   @id @default(uuid())
  userId      String
  firstName   String
  lastName    String
  email       String 
  phoneNumber String
  addressLine String
  postalCode  String
  city        String
  country     String   @default("France")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotes      Quote[] 
  invoices    Invoice[]
  contracts   Contract[]

  @@unique([userId, email])
}

model QuoteTemplate {
  id            String   @id @default(uuid())
  name          String
  contentHtml   String
  userId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  variables     QuoteTemplateVariable[]
  quotes        Quote[]
}

model QuoteTemplateVariable {
  id            String  @id @default(uuid())
  templateId    String
  variableName  String  
  label         String
  type          VariableType @default(string)
  required      Boolean @default(false)

  template      QuoteTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@unique([templateId, variableName])
}

model Quote {
  id              String   @id @default(uuid())
  number          Int
  templateId      String?
  userId          String
  clientId        String?
  status          QuoteStatus @default(draft)
  generatedHtml   String
  issuedAt        DateTime?
  validUntil      DateTime
  pdfKey          String
  previewKey      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  client          Client?   @relation(fields: [clientId], references: [id], onDelete: SetNull)
  template        QuoteTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  variableValues  QuoteVariableValue[]

  invoice         Invoice? @relation("QuoteToInvoice")
  contract        Contract?

  @@unique([userId, number]) 
}

enum QuoteStatus {
  draft
  sent
  accepted
  refused
}

model QuoteVariableValue {
  id              String @id @default(uuid())
  quoteId         String
  variableName    String
  label           String
  type            VariableType
  required        Boolean
  value           String

  quote           Quote  @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  
  @@unique([quoteId, variableName])
}

model InvoiceTemplate {
  id            String   @id @default(uuid())
  name          String
  contentHtml   String
  userId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  variables     InvoiceTemplateVariable[]
  invoices      Invoice[]
}

model InvoiceTemplateVariable {
  id            String  @id @default(uuid())
  templateId    String
  variableName  String  
  label         String
  type          VariableType @default(string)
  required      Boolean @default(false)

  template      InvoiceTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@unique([templateId, variableName])
}

model Invoice {
  id              String   @id @default(uuid())
  number          Int
  templateId      String?
  userId          String
  clientId        String?
  quoteId         String?   @unique
  status          InvoiceStatus @default(draft)
  generatedHtml   String
  issuedAt        DateTime?
  dueDate         DateTime
  pdfKey          String
  previewKey      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt


  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  client          Client?   @relation(fields: [clientId], references: [id], onDelete: SetNull)
  template        InvoiceTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  variableValues  InvoiceVariableValue[]

  quote           Quote?   @relation("QuoteToInvoice", fields: [quoteId], references: [id], onDelete: SetNull)
  contract        Contract?

  @@unique([userId, number])
}

model Contract {
  id              String   @id @default(uuid())
  number          Int
  templateId      String?
  userId          String
  clientId        String?
  quoteId         String?   @unique
  invoiceId       String?   @unique
  status          ContractStatus @default(draft)
  generatedHtml   String
  issuedAt        DateTime?
  validUntil      DateTime
  pdfKey          String
  previewKey      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  client          Client?   @relation(fields: [clientId], references: [id], onDelete: SetNull)
  template        ContractTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  variableValues  ContractVariableValue[]

  quote           Quote?   @relation(fields: [quoteId], references: [id], onDelete: SetNull)
  invoice         Invoice? @relation(fields: [invoiceId], references: [id], onDelete: SetNull)

  @@unique([userId, number])
}


model InvoiceVariableValue {
  id              String @id @default(uuid())
  invoiceId       String
  variableName    String
  label           String
  type            VariableType
  required        Boolean
  value           String

  invoice         Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  @@unique([invoiceId, variableName])
}

enum InvoiceStatus {
  draft
  sent
  paid
  overdue
  cancelled
}

model ContractTemplate {
  id          String   @id @default(uuid())
  name        String
  contentHtml String
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  variables   ContractTemplateVariable[]
  contracts   Contract[]
}

model ContractTemplateVariable {
  id           String  @id @default(uuid())
  templateId   String
  variableName String
  label        String
  type         VariableType @default(string)
  required     Boolean @default(false)

  template     ContractTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, variableName])
}

model ContractVariableValue {
  id            String @id @default(uuid())
  contractId    String
  variableName    String
  label           String
  type            VariableType
  required        Boolean
  value           String

  contract      Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@unique([contractId, variableName])
}

enum ContractStatus {
  draft
  sent
  signed
  declined
  expired
  cancelled
}

enum VariableType {
  string
  number
  boolean
  date
  textarea
  email
  url
}